Housing Code
============

.. code-block:: python

    # -*- coding: utf-8 -*-
    #
    # Housing Price Predictor documentation build configuration file, created by
    # sphinx-quickstart.
    #
    # This file is execfile()d with the current directory set to its containing dir.
    #
    # Note that not all possible configuration values are present in this
    # autogenerated file.
    #
    # All configuration values have a default; values that are commented out
    # serve to show the default.

    import pandas as pd
    import numpy as np 
    import os
    import seaborn as sns
    import matplotlib.pyplot as plt
    from sklearn.model_selection import train_test_split,StratifiedShuffleSplit
    from sklearn.impute import SimpleImputer
    from sklearn.preprocessing import StandardScaler,OneHotEncoder


    pwd = os.getcwd()
    filepath = os.path.join(pwd,"housing.csv")
    pricing_data = pd.read_csv(filepath)
    pricing_data.head(10)

    pricing_data.describe().T
    pricing_data.info()
    sns.barplot(pricing_data["ocean_proximity"].value_counts(), orient="h")
    plt.xlabel("Count")
    plt.show()
    sns.displot(pricing_data["median_income"], kind="hist", bins=10)
    plt.show()
    pricing_data["sub_income"] = pd.cut(pricing_data["median_income"],bins=[0.,1.5,3.0,4.5,6.0,np.inf], labels = [1,2,3,4,5])
    pricing_data["sub_income"].value_counts()
    pricing_data["sub_income"].hist()

    y = pricing_data["median_house_value"]
    X = pricing_data.drop("median_house_value",axis=1)

    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3 , random_state = 42)
    X_train["median_income"].value_counts()/len(X_train)

    X_test["median_income"].value_counts()/len(X_test)
    split = StratifiedShuffleSplit(n_splits=1, test_size = 0.3, random_state = 42)
    for train_index, test_index in split.split(pricing_data, pricing_data["sub_income"]):
        strat_train_set = pricing_data.loc[train_index]
        strat_test_set = pricing_data.loc[test_index]
     strat_train_set["sub_income"].value_counts()/len(strat_train_set)

    def sub_income_proportions(data):
           """
        Calculates the proportions of each unique value in the 'sub_income' column of the input data.

        Parameters:
        data (pandas.DataFrame): The input data containing the 'sub_income' column.

        Returns:
        pandas.Series: A pandas Series containing the proportions of each unique value in the 'sub_income' column.
        """
        return data["sub_income"].value_counts()/len(data)
    train_set, test_set = train_test_split(pricing_data, test_size =0.3, random_state= 42)

    compare_props = pd.DataFrame({
        "Overall":sub_income_proportions(pricing_data),
        "Stratified" : sub_income_proportions(strat_test_set),
        "Random" : sub_income_proportions(test_set),

    }).sort_index()
    compare_props["Rand. %error"] = 100 * compare_props["Random"] / compare_props["Overall"] - 100
    compare_props["Strat. %error"] = 100 * compare_props["Stratified"] / compare_props["Overall"] - 100
    compare_props
    strat_train_set.drop("sub_income" , axis = 1, inplace = True)
    strat_test_set.drop("sub_income" , axis = 1, inplace = True)
    strat_train_copy= strat_train_set.copy()
    strat_train_copy.hist(bins = 50, figsize =(20,15))
    plt.show()
    strat_train_copy.plot(kind="scatter", x="longitude",y="latitude", alpha = 0.4,
                          s= strat_train_copy["population"]/100,label="population",
                          figsize=(10,7), c="median_house_value",cmap=plt.get_cmap("jet"),
                          colorbar =True, sharex=False)
    strat_train_encoded = pd.get_dummies(strat_train_copy, dtype = int, drop_first = True)
    corr = strat_train_encoded.corr()
    mask = np.triu(np.ones_like(corr, dtype=bool))
    cmap = sns.diverging_palette(230,20, as_cmap=True)
    plt.figure(figsize=(12,12))
    sns.heatmap(corr, mask=mask, cmap = cmap, vmax=3, center=0,square=True, linewidth=.5)
    plt.show()
    housing = strat_train_encoded.drop("median_house_value", axis = 1)
    house_label = strat_train_encoded["median_house_value"]
    housing["total_bedrooms"] = housing["total_bedrooms"].fillna(housing["total_bedrooms"].mean())
    imputer = SimpleImputer(strategy = "mean")
    num_housing = housing.select_dtypes(include = [np.number])
    num_housing_imputed = imputer.fit_transform(num_housing)
    num_housing_imputed_df = pd.DataFrame(num_housing)
